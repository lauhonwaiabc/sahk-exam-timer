<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8"/>
    <meta name="viewport" content="width=device-width, initial-scale=1"/>
    <title>OSCE Exam Timer</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            padding: 0;
            display: flex;
            flex-direction: column;
            min-height: 100vh;
            background: #f9f9f9;
            color: #222;
        }
        #clock {
            background: #222;
            color: #0f0;
            font-size: 2em;
            text-align: center;
            padding: 14px 0;
            font-weight: 900;
            letter-spacing: 3px;
            user-select: none;
        }
        #controls {
            text-align: center;
            margin: 15px 0;
            display: flex;
            justify-content: center;
            gap: 10px;
        }
        button {
            font-size: 1.1em;
            padding: 8px 18px;
            cursor: pointer;
            border: none;
            border-radius: 6px;
            background: #4caf50;
            color: white;
            font-weight: 700;
            transition: background-color 0.3s;
            user-select: none;
        }
        button:disabled {
            cursor: not-allowed;
            opacity: 0.7;
        }
        button:hover:not(:disabled) {
            background: #388e3c;
        }
        #topMenu {
            margin-bottom: 15px;
        }
        #sectionsList, #subsectionsList {
            list-style: none;
            padding: 0;
            margin: 0;
            display: flex;
            gap: 12px;
            flex-wrap: wrap;
            justify-content: center;
        }
        #sectionsList li, #subsectionsList li {
            background: #e0e0e0;
            padding: 5px 10px;
            border-radius: 8px;
            cursor: pointer;
            user-select: none;
            min-width: 120px;
            text-align: center;
            font-weight: 700;
            box-shadow: 0 2px 5px rgb(0 0 0 / 0.1);
            transition: background-color 0.3s, color 0.3s;
        }
        #sectionsList li.selected, #subsectionsList li.selected {
            background: #4caf50;
            color: white;
            box-shadow: 0 4px 10px rgb(76 175 80 / 0.6);
        }
        /* Disabled but NOT selected (greyed out) */
        #sectionsList li.disabled:not(.selected),
        #subsectionsList li.disabled:not(.selected) {
            pointer-events: none;
            opacity: 0.5;
            background: #ddd !important;
            color: #888 !important;
            cursor: not-allowed;
        }
        /* Disabled AND selected (keep green) */
        #sectionsList li.disabled.selected,
        #subsectionsList li.disabled.selected {
            pointer-events: none;
            opacity: 1;
            background: #4caf50 !important;
            color: white !important;
            cursor: not-allowed;
            box-shadow: 0 4px 10px rgb(76 175 80 / 0.6);
        }
        #bottomContent {
            flex-grow: 1;
            padding: 25px 40px 40px;
            overflow-y: auto;
            background: white;
            box-shadow: inset 0 0 15px rgb(0 0 0 / 0.05);
        }
        .timer {
            font-size: 7em;
            font-weight: 900;
            text-align: center;
            margin-bottom: 10px;
            color: #d33;
            user-select: none;
            letter-spacing: 4px;
        }
        .info {
            font-size: 1.3em;
            color: #444;
            max-width: 900px;
            margin: 0 auto 20px;
            line-height: 1.6;
            font-weight: 600;
            text-align: center;
        }
        #stationModeContainer, #candidateModeContainer {
            max-width: 1800px;
            margin: 0 auto;
            display: flex;
            flex-wrap: wrap;
            gap: 24px;
            justify-content: center;
        }
        .osce-box {
            background: #f0f7f5;
            border-radius: 12px;
            box-shadow: 0 3px 8px rgb(0 0 0 / 0.12);
            padding: 20px 25px;
            width: 220px;
            display: flex;
            flex-direction: column;
            user-select: none;
            transition: box-shadow 0.3s;
            margin-bottom: 14px;
        }
        .osce-box:hover {
            box-shadow: 0 6px 16px rgb(0 0 0 / 0.2);
        }
        .osce-title {
            font-weight: 900;
            font-size: 2em;
            margin-bottom: 12px;
            color: #2e7d32;
            text-align: center;
            letter-spacing: 1.2px;
        }
        .candidate-row, .observer-row {
            display: flex;
            align-items: center;
            gap: 12px;
            justify-content: center;
        }
        .role-label {
            font-weight: 700;
            font-size: 1.2em;
            color: #555;
            margin: 0;
        }
        .candidate-name {
            font-weight: 900;
            font-size: 1.2em;
            color: #1b5e20;
            margin: 0;
        }
        .candidate-cell {
            background: #f0f7f5;
            border-radius: 12px;
            box-shadow: 0 3px 8px rgb(0 0 0 / 0.12);
            padding: 18px 14px;
            display: flex;
            flex-direction: column;
            align-items: center;
            font-weight: 700;
            font-size: 1.2em;
            color: #1b5e20;
            transition: box-shadow 0.3s;
            text-align: center;
            width: 220px;
            flex: 0 0 220px;
            box-sizing: border-box;
            margin-bottom: 14px;
        }
        .candidate-cell:hover {
            box-shadow: 0 6px 16px rgb(0 0 0 / 0.2);
        }
        .candidate-cell.observer-cell {
            background: #fff9c4 !important;
        }
        .candidate-cell.rest-station {
            background: #f0e3fa !important;
            border: 2px solid #9621f3 !important;
        }
        .candidate-cell.observer-cell.rest-station {
            background: #fff9c4 !important;
            border: 2px solid #2196f3 !important;
        }
        .candidate-number {
            font-weight: 900;
            font-size: 1.2em;
            margin-bottom: 4px;
        }
        .candidate-role.candidate {
            font-size: 0.95em;
            font-weight: 900;
            color: #5e1b20;
            letter-spacing: 1px;
        }
        .candidate-role.observer {
            font-size: 0.95em;
            font-weight: 600;
            color: #1b5e20;
        }
        .candidate-station {
            font-weight: 700;
            font-size: 0.9em;
            color: #2e7d32;
        }
        .osce-box.rest-station {
            background: #f0e3fa !important;
            border: 2px solid #9621f3;
        }
        .osce-box.rest-station .osce-title,
        .osce-box.rest-station .candidate-station {
            color: #1565c0 !important;
        }
        .observer-row {
            background: #fff9c4;
            border-radius: 8px;
            padding: 2px 4px;
            margin-top: 6px;
        }
        /* Highlight for search */
        .osce-box.highlight, .candidate-cell.highlight {
            outline: 4px solid #1976d2 !important;
            box-shadow: 0 0 18px #1976d2cc !important;
            background: #e3f2fd !important;
        }
@media (max-width: 600px) {
  body {
    font-size: 14px;
    padding: 10px 8px;
  }
  #clock {
    font-size: 1.5em;
    padding: 10px 0;
    letter-spacing: 1.5px;
  }
  #controls {
    flex-wrap: wrap;
    gap: 8px;
    margin: 10px 0;
  }
  button {
    font-size: 1em;
    padding: 6px 14px;
    border-radius: 5px;
  }
  #startTimeContainer label,
  #searchContainer input,
  #searchContainer button {
    font-size: 1em;
  }
  #startTimeInput {
    width: 120px;
    padding: 5px 10px;
  }
  #searchInput {
    width: 180px;
  }
  #topMenu {
    margin-bottom: 10px;
  }
  #sectionsList, #subsectionsList {
    gap: 8px;
  }
  #sectionsList li, #subsectionsList li {
    min-width: 90px;
    font-size: 0.9em;
    padding: 4px 8px;
  }
  #bottomContent {
    padding: 15px 20px 20px;
  }
  .timer {
    font-size: 4.5em;
    margin-bottom: 8px;
  }
  .info {
    font-size: 1em;
    max-width: 100%;
    margin-bottom: 15px;
  }
  #stationModeContainer, #candidateModeContainer {
    gap: 12px;
    max-width: 100%;
  }
  .osce-box, .candidate-cell {
    width: 160px;
    flex: 1 1 140px;
    padding: 14px 16px;
    box-sizing: border-box;
    font-size: 0.9em;
  }
  .osce-title {
    font-size: 1.5em;
    margin-bottom: 8px;
  }
  .candidate-row, .observer-row {
    gap: 6px;
  }
  .role-label, .candidate-name, .candidate-number, .candidate-role, .candidate-station {
    font-size: 0.9em;
  }
  .candidate-role.candidate,
  .candidate-role.observer {
    font-size: 0.85em;
  }
}
    </style>
</head>
<body>

<div id="clock">00:00:00</div>
<div id="controls">
    <button id="startBtn">Start</button>
    <button id="pauseBtn" disabled>Pause</button>
    <button id="stopBtn" disabled>Stop &amp; Reset</button>
    <button id="toggleModeBtn" aria-pressed="false" aria-label="Toggle between Station Mode and Candidate Mode">Switch to Candidate Mode</button>
</div>

<!-- Scheduled Start Time Input -->
<div id="startTimeContainer" style="text-align:center;margin:10px 0;">
  <label for="startTimeInput" style="font-weight:700;margin-right:8px;">Start Time (hh:mm:ss):</label>
  <input id="startTimeInput" type="time" step="1" value="13:30:00" style="font-size:1.1em;padding:6px 12px;border-radius:6px;border:1px solid #bbb;width:140px;">
  <button id="applyStartTimeBtn" style="font-size:1.1em;padding:7px 18px;border-radius:6px;border:none;background:#1976d2;color:white;font-weight:700;cursor:pointer;">Apply</button>
</div>

<!-- Search Input -->
<div id="searchContainer" style="display:flex;justify-content:center;align-items:center;margin:10px 0;">
    <input id="searchInput" type="text" placeholder="Enter Candidate Number, Station Name or Station Number" style="font-size:1.1em;padding:6px 12px;border-radius:6px;border:1px solid #bbb;width:320px;margin-right:8px;">
    <button id="searchBtn" style="font-size:1.1em;padding:7px 18px;border-radius:6px;border:none;background:#1976d2;color:white;font-weight:700;cursor:pointer;">Search</button>
</div>

<div id="topMenu">
    <ul id="sectionsList"></ul>
    <br>
    <ul id="subsectionsList"></ul>
</div>

<div id="bottomContent">
    <div class="timer" id="timerDisplay">00:00</div>
    <div class="info" id="infoDisplay">Select a session and phase to see information here.</div>
    <div id="stationModeContainer" aria-live="polite"></div>
    <div id="candidateModeContainer" aria-live="polite" style="display:none;"></div>
</div>

<script>
(() => {
    // --- CONFIGURATION ---
    const NUM_SESSIONS = 15;
    const NUM_STATIONS = 15;
    const SESSION_PHASES = [        
        {title: 'Transit', duration: 120, info: '2 minutes'},
        {title: 'OSCE Exam', duration: 600, info: '10 minutes'}
    ];
const SESSION_TIMES = [
  "13:30-13:42",
  "13:42-13:54",
  "13:54-14:06",
  "14:06-14:18",
  "14:18-14:30",
  "14:30-14:42",
  "14:42-14:54",
  "14:54-15:06",
  "15:06-15:18",
  "15:18-15:30",
  "15:30-15:42",
  "15:42-15:54",
  "15:54-16:06",
  "16:06-16:18",
  "16:18-16:30"
];

const STATION_NAMES = [
    "Procedure",
    "Anatomy 1",
    "Rest",
    "Regional",
    "Equipment",
    "Rest",
    "Long Case 1",
    "Long Case 2",
    "Rest",
    "Crisis",
    "Communication",
    "Rest",
    "Anatomy 2",
    "ACLS/ATLS",
    "Rest"
];

const REST_INDICES = [2, 5, 8, 11, 14];

const osceData={"Session 1":{"Candidate":["1","7","10","11","12","16","18",null,"21","24","25","26","29","32","36"],"Observer":["13",null,null,"28",null,null,"33",null,null,"35",null,null,null,null,null]},"Session 2":{"Candidate":["36","1","7","10","11","12","16","18",null,"21","24","25","26","29","32"],"Observer":[null,"13",null,null,"28",null,null,"33",null,null,"35",null,null,null,null]},"Session 3":{"Candidate":["32","36","1","7","10","11","12","16","18",null,"21","24","25","26","29"],"Observer":[null,"13",null,null,"28",null,null,"33",null,null,"35",null,null,null,null]},"Session 4":{"Candidate":["29","32","36","1","7","10","11","12","16","18",null,"21","24","25","26"],"Observer":["28",null,null,"33",null,null,"35",null,null,null,null,null,"13",null,null]},"Session 5":{"Candidate":["26","29","32","36","1","7","10","11","12","16","18",null,"21","24","25"],"Observer":[null,"28",null,null,"33",null,null,"35",null,null,null,null,null,"13",null]},"Session 6":{"Candidate":["25","26","29","32","36","1","7","10","11","12","16","18",null,"21","24"],"Observer":[null,"28",null,null,"33",null,null,"35",null,null,null,null,null,"13",null]},"Session 7":{"Candidate":["24","25","26","29","32","36","1","7","10","11","12","16","18",null,"21"],"Observer":["33",null,null,"35",null,null,null,null,null,"13",null,null,"28",null,null]},"Session 8":{"Candidate":["21","24","25","26","29","32","36","1","7","10","11","12","16","18",null],"Observer":[null,"33",null,null,"35",null,null,null,null,null,"13",null,"28",null,null]},"Session 9":{"Candidate":[null,"21","24","25","26","29","32","36","1","7","10","11","12","16","18"],"Observer":[null,"33",null,null,"35",null,null,null,null,null,"13",null,null,"28",null]},"Session 10":{"Candidate":["18",null,"21","24","25","26","29","32","36","1","7","10","11","12","16"],"Observer":["35",null,null,null,null,null,"13",null,null,"28",null,null,"33",null,null]},"Session 11":{"Candidate":["16","18",null,"21","24","25","26","29","32","36","1","7","10","11","12"],"Observer":[null,"35",null,null,null,null,null,"13",null,null,"28",null,"33",null,null]},"Session 12":{"Candidate":["12","16","18",null,"21","24","25","26","29","32","36","1","7","10","11"],"Observer":[null,"35",null,null,null,null,null,"13",null,null,"28",null,null,"33",null]},"Session 13":{"Candidate":["11","12","16","18",null,"21","24","25","26","29","32","36","1","7","10"],"Observer":[null,null,null,"13",null,null,"28",null,null,"33",null,null,"35",null,null]},"Session 14":{"Candidate":["10","11","12","16","18",null,"21","24","25","26","29","32","36","1","7"],"Observer":[null,null,null,null,"13",null,null,"28",null,null,"33",null,"35",null,null]},"Session 15":{"Candidate":["7","10","11","12","16","18",null,"21","24","25","26","29","32","36","1"],"Observer":[null,null,null,null,"13",null,null,"28",null,null,"33",null,null,"35",null]}};

    // --- DOM ELEMENTS ---
    const clockEl = document.getElementById('clock');
    const startBtn = document.getElementById('startBtn');
    const pauseBtn = document.getElementById('pauseBtn');
    const stopBtn = document.getElementById('stopBtn');
    const toggleModeBtn = document.getElementById('toggleModeBtn');
    const sectionsList = document.getElementById('sectionsList');
    const subsectionsList = document.getElementById('subsectionsList');
    const timerDisplay = document.getElementById('timerDisplay');
    const infoDisplay = document.getElementById('infoDisplay');
    const stationModeContainer = document.getElementById('stationModeContainer');
    const candidateModeContainer = document.getElementById('candidateModeContainer');
    const searchInput = document.getElementById('searchInput');
    const searchBtn = document.getElementById('searchBtn');
    const startTimeInput = document.getElementById('startTimeInput');
    const applyStartTimeBtn = document.getElementById('applyStartTimeBtn');
    let lastSearchValue = '';

    // --- STATE ---
    let isRunning = false;
    let selectedSessionIndex = 0;
    let selectedPhaseIndex = 0;
    let countdownInterval = null;
    let countdownSecondsLeft = 0;
    let beepAudioCtx = null;
    let isCandidateMode = false;

    // --- SCHEDULED TIME STATE ---
    let startTimeStr = "13:30:00";
    let scheduledTimes = [];
    function parseTimeString(str) {
        if (!str) return 0;
        const [h, m, s] = str.split(':').map(Number);
        return (h*3600) + (m*60) + (s || 0);
    }
    function formatTimeHMSSec(secs) {
        const h = Math.floor(secs/3600);
        const m = Math.floor((secs%3600)/60);
        const s = secs%60;
        return `${h.toString().padStart(2,'0')}:${m.toString().padStart(2,'0')}:${s.toString().padStart(2,'0')}`;
    }
    function recalculateScheduledTimes() {
        scheduledTimes = [];
        let t = parseTimeString(startTimeStr);
        for (let s=0; s<NUM_SESSIONS; s++) {
            scheduledTimes[s] = [];
            for (let p=0; p<SESSION_PHASES.length; p++) {
                scheduledTimes[s][p] = t;
                t += SESSION_PHASES[p].duration;
            }
        }
    }
    recalculateScheduledTimes();

    // --- MENU ENABLE/DISABLE ---
    function setSessionPhaseMenusEnabled(enabled) {
        document.querySelectorAll('#sectionsList li').forEach((li, index) => {
            if (enabled) {
                li.classList.remove('disabled');
                li.tabIndex = 0;
                li.style.pointerEvents = '';
                li.style.opacity = '';
            } else {
                if (index === selectedSessionIndex) {
                    li.classList.add('disabled', 'selected');
                    li.tabIndex = -1;
                    li.style.pointerEvents = 'none';
                    li.style.opacity = '1';
                } else {
                    li.classList.add('disabled');
                    li.classList.remove('selected');
                    li.tabIndex = -1;
                    li.style.pointerEvents = 'none';
                    li.style.opacity = '0.5';
                }
            }
        });
        document.querySelectorAll('#subsectionsList li').forEach((li, index) => {
            if (enabled) {
                li.classList.remove('disabled');
                li.tabIndex = 0;
                li.style.pointerEvents = '';
                li.style.opacity = '';
            } else {
                if (index === selectedPhaseIndex) {
                    li.classList.add('disabled', 'selected');
                    li.tabIndex = -1;
                    li.style.pointerEvents = 'none';
                    li.style.opacity = '1';
                } else {
                    li.classList.add('disabled');
                    li.classList.remove('selected');
                    li.tabIndex = -1;
                    li.style.pointerEvents = 'none';
                    li.style.opacity = '0.5';
                }
            }
        });
    }

    // --- AUDIO BEEP ---
    function initBeep() {
        if (!beepAudioCtx) beepAudioCtx = new (window.AudioContext || window.webkitAudioContext)();
    }
    function resumeAudioContext() {
        if (beepAudioCtx && beepAudioCtx.state === 'suspended') beepAudioCtx.resume();
    }
    document.body.addEventListener('click', resumeAudioContext, {once: true});
    document.body.addEventListener('keydown', resumeAudioContext, {once: true});
    function beep(times = 1) {
        initBeep();
        let count = 0;
        function playBeep() {
            if (count >= times) return;
            const oscillator = beepAudioCtx.createOscillator();
            const gainNode = beepAudioCtx.createGain();
            oscillator.frequency.value = 1000;
            oscillator.type = 'square';
            oscillator.connect(gainNode);
            gainNode.connect(beepAudioCtx.destination);
            oscillator.start();
            setTimeout(() => {
                oscillator.stop();
                count++;
                setTimeout(playBeep, 150);
            }, 200);
        }
        playBeep();
    }

    // --- CLOCK ---
    function formatTime(s) {
        const m = Math.floor(s / 60);
        const sec = s % 60;
        return `${m.toString().padStart(2, '0')}:${sec.toString().padStart(2, '0')}`;
    }
    function updateClock() {
        const now = new Date();
        const h = now.getHours().toString().padStart(2, '0');
        const m = now.getMinutes().toString().padStart(2, '0');
        const s = now.getSeconds().toString().padStart(2, '0');
        clockEl.textContent = `${h}:${m}:${s}`;
    }
    setInterval(updateClock, 1000); updateClock();

    // --- SEARCH HIGHLIGHT FUNCTIONALITY ---
    function highlightBoxes(searchValue) {
        document.querySelectorAll('.osce-box.highlight, .candidate-cell.highlight').forEach(el => el.classList.remove('highlight'));
        if (!searchValue) return;
        const search = searchValue.trim().toLowerCase();
        let stationNum = null;
        const stationMatch = search.match(/^station\s*(\d{1,2})$/i);
        if (stationMatch) {
            stationNum = parseInt(stationMatch[1], 10);
            if (stationNum < 1 || stationNum > NUM_STATIONS) stationNum = null;
        }
        let stationNameIndex = null;
        if (!stationNum) {
            for (let i = 0; i < STATION_NAMES.length; i++) {
                if (STATION_NAMES[i].toLowerCase().includes(search)) {
                    stationNameIndex = i;
                    break;
                }
            }
        }
        if (isCandidateMode) {
            document.querySelectorAll('#candidateModeContainer .candidate-cell').forEach(cell => {
                const num = cell.querySelector('.candidate-number')?.textContent.trim();
                if (num === searchValue) cell.classList.add('highlight');
                if (stationNum) {
                    const label = cell.querySelector('.candidate-station')?.textContent.match(/Station\s*(\d+)/i);
                    if (label && parseInt(label[1], 10) === stationNum) cell.classList.add('highlight');
                }
                if (stationNameIndex !== null) {
                    const label = cell.querySelector('.candidate-station')?.textContent.toLowerCase();
                    if (label && label.includes(STATION_NAMES[stationNameIndex].toLowerCase())) cell.classList.add('highlight');
                }
            });
        } else {
            document.querySelectorAll('#stationModeContainer .osce-box').forEach((box, idx) => {
                const cand = box.querySelector('.candidate-row .candidate-name')?.textContent.trim();
                const obs = box.querySelector('.observer-row .candidate-name')?.textContent.trim();
                if (cand === searchValue || obs === searchValue) box.classList.add('highlight');
                if (stationNum && idx === (stationNum - 1)) box.classList.add('highlight');
                if (stationNameIndex !== null && idx === stationNameIndex) box.classList.add('highlight');
            });
        }
    }

    function doSearch() {
        lastSearchValue = searchInput.value.trim();
        highlightBoxes(lastSearchValue);
    }
    searchInput.addEventListener('keydown', e => {
        if (e.key === 'Enter') doSearch();
    });
    searchBtn.addEventListener('click', doSearch);
    searchInput.addEventListener('input', () => {
        if (!searchInput.value.trim()) {
            lastSearchValue = '';
            highlightBoxes('');
        }
    });

    // --- RENDERING ---
    function renderSections() {
        sectionsList.innerHTML = '';
        for (let i = 0; i < NUM_SESSIONS; i++) {
            const li = document.createElement('li');
            li.textContent = `Session ${i + 1}`;
            if (i === selectedSessionIndex) li.classList.add('selected');
            li.addEventListener('click', () => {
                if (isRunning) return;
                if (selectedSessionIndex !== i) {
                    selectedSessionIndex = i;
                    selectedPhaseIndex = 0;
                    resetTimerToCurrentPhase();
                    renderSections();
                    renderPhases();
                    renderBottomContent();
                    if (isRunning) startCountdownForSelected();
                }
            });
            sectionsList.appendChild(li);
        }
        setSessionPhaseMenusEnabled(!isRunning);
    }
    function renderPhases() {
        subsectionsList.innerHTML = '';
        SESSION_PHASES.forEach((phase, idx) => {
            const li = document.createElement('li');
            li.textContent = phase.title;
            if (idx === selectedPhaseIndex) li.classList.add('selected');
            li.addEventListener('click', () => {
                if (isRunning) return;
                if (selectedPhaseIndex !== idx) {
                    selectedPhaseIndex = idx;
                    resetTimerToCurrentPhase();
                    renderPhases();
                    renderBottomContent();
                    if (isRunning) startCountdownForSelected();
                }
            });
            subsectionsList.appendChild(li);
        });
        setSessionPhaseMenusEnabled(!isRunning);
    }
    function renderBottomContent() {
        const phase = SESSION_PHASES[selectedPhaseIndex];
        updateTimerDisplay();
        const sessionNumber = selectedSessionIndex + 1;
        const heading = 'SAHK Final Examination Preparation Course - OSCE Examination';
        const sessionTime = SESSION_TIMES[selectedSessionIndex] || '';
        const schedSec = scheduledTimes[selectedSessionIndex]?.[selectedPhaseIndex];
        const schedTimeStr = schedSec ? formatTimeHMSSec(schedSec) : '';
        const sessionLine = `Session ${sessionNumber}, ${sessionTime} (${phase.title} (${phase.info}))<br>
            <span style="color:#1976d2;">Scheduled Start: ${schedTimeStr}</span>`;
        infoDisplay.innerHTML = `
          <div style="font-weight: 700; font-size: 1em; margin-bottom: 6px; text-align:center;">
            ${heading}
          </div>
          <div style="font-weight: 600; font-size: 1em; margin-bottom: 10px; text-align:center;">
            ${sessionLine}
          </div>
        `;
        if (isCandidateMode) {
            renderCandidateMode();
        } else {
            renderStationMode();
        }
    }
    function renderStationMode() {
        candidateModeContainer.style.display = 'none';
        stationModeContainer.style.display = 'flex';
        const sessionKey = `Session ${selectedSessionIndex + 1}`;
        const details = osceData[sessionKey];
        if (!details) {
            stationModeContainer.innerHTML = '<p style="text-align:center; color:#666;">No data available.</p>';
            return;
        }
        let html = '';
        for (let i = 0; i < NUM_STATIONS; i++) {
            const candidate = details.Candidate[i] || '—';
            const observer = details.Observer[i] || '—';
            const isRest = REST_INDICES.includes(i);
            html += `
            <div class="osce-box${isRest ? ' rest-station' : ''}" tabindex="0" aria-label="Station ${i + 1} details">
              <div class="osce-title">${STATION_NAMES[i]}<br><span style="font-size:0.7em;color:#555;">Station ${i + 1}</span></div>
              <div class="candidate-row">
                <div class="role-label">Candidate</div>
                <div class="candidate-name">${candidate}</div>
              </div>
              <div class="observer-row">
                <div class="role-label">Observer</div>
                <div class="candidate-name">${observer}</div>
              </div>
            </div>
          `;
        }
        stationModeContainer.innerHTML = html;
        highlightBoxes(lastSearchValue);
    }
    function renderCandidateMode() {
        stationModeContainer.style.display = 'none';
        candidateModeContainer.style.display = 'flex';
        const sessionKey = `Session ${selectedSessionIndex + 1}`;
        const details = osceData[sessionKey];
        if (!details) {
            candidateModeContainer.innerHTML = '<p style="text-align:center; color:#666;">No data available.</p>';
            return;
        }
        const entries = [];
        for (let i = 0; i < NUM_STATIONS; i++) {
            const candNum = details.Candidate[i];
            if (candNum) entries.push({number: candNum, stationIndex: i, role: 'Candidate'});
            const obsNum = details.Observer[i];
            if (obsNum) entries.push({number: obsNum, stationIndex: i, role: 'Observer'});
        }
        entries.sort((a, b) => a.number.localeCompare(b.number));
        let html = '';
        for (let i = 0; i < entries.length; i++) {
            const entry = entries[i];
            const isRest = REST_INDICES.includes(entry.stationIndex);
            let cellClass = 'candidate-cell';
            if (entry.role === 'Observer') cellClass += ' observer-cell';
            if (isRest) cellClass += ' rest-station';
            html += `
            <div class="${cellClass}" tabindex="0" aria-label="${entry.role} ${entry.number}, Station ${entry.stationIndex + 1}">
              <div class="candidate-number">${entry.number}</div>
              <div class="candidate-role ${entry.role.toLowerCase()}">${entry.role}</div>
              <div class="candidate-station">${STATION_NAMES[entry.stationIndex]}<br><span style="font-size:0.8em;color:#555;">Station ${entry.stationIndex + 1}</span></div>
            </div>
          `;
        }
        candidateModeContainer.innerHTML = html;
        highlightBoxes(lastSearchValue);
    }
    function updateTimerDisplay() {
        timerDisplay.textContent = formatTime(countdownSecondsLeft);
    }
    function resetTimerToCurrentPhase() {
        countdownSecondsLeft = SESSION_PHASES[selectedPhaseIndex].duration;
    }
    function moveToNextPhase() {
        let s = selectedSessionIndex;
        let p = selectedPhaseIndex + 1;
        if (p >= SESSION_PHASES.length) {
            s++;
            p = 0;
            if (s >= NUM_SESSIONS) {
                stopTimers();
                alert('All sessions completed!');
                return;
            }
        }
        selectedSessionIndex = s;
        selectedPhaseIndex = p;
        renderSections();
        renderPhases();
        resetTimerToCurrentPhase();
        renderBottomContent();
        if (isRunning) startCountdownForSelected();
    }
    function startCountdownForSelected() {
        clearInterval(countdownInterval);
        if (countdownSecondsLeft <= 0) resetTimerToCurrentPhase();
        updateTimerDisplay();
        countdownInterval = setInterval(() => {
            if (!isRunning) return;
            countdownSecondsLeft--;
            updateTimerDisplay();
            if (countdownSecondsLeft <= 0) {
                beep(5);
                moveToNextPhase();
            }
        }, 1000);
    }
    function startTimers() {
        if (isRunning) return;
        isRunning = true;
        startBtn.disabled = true;
        pauseBtn.disabled = false;
        stopBtn.disabled = false;
        setSessionPhaseMenusEnabled(false);
        if (countdownSecondsLeft <= 0) resetTimerToCurrentPhase();
        startCountdownForSelected();
    }
    function pauseTimers() {
        if (!isRunning) return;
        isRunning = false;
        startBtn.disabled = false;
        pauseBtn.disabled = true;
        stopBtn.disabled = false;
        setSessionPhaseMenusEnabled(true);
        clearInterval(countdownInterval);
    }
    function stopTimers() {
        isRunning = false;
        startBtn.disabled = false;
        pauseBtn.disabled = true;
        stopBtn.disabled = true;
        setSessionPhaseMenusEnabled(true);
        clearInterval(countdownInterval);
        resetTimerToCurrentPhase();
        updateTimerDisplay();
    }
    toggleModeBtn.addEventListener('click', () => {
        isCandidateMode = !isCandidateMode;
        toggleModeBtn.textContent = isCandidateMode ? 'Switch to Station Mode' : 'Switch to Candidate Mode';
        toggleModeBtn.setAttribute('aria-pressed', isCandidateMode.toString());
        renderBottomContent();
    });
    startBtn.addEventListener('click', startTimers);
    pauseBtn.addEventListener('click', pauseTimers);
    stopBtn.addEventListener('click', stopTimers);

    // --- Start Time Input Handler ---
    applyStartTimeBtn.addEventListener('click', () => {
        startTimeStr = startTimeInput.value || "13:30:00";
        recalculateScheduledTimes();
        renderSections();
        renderPhases();
        renderBottomContent();
    });

    // --- Scheduled Timer Auto-Start and Auto-Navigation ---
    setInterval(() => {
        if (isRunning) return;
        const now = new Date();
        const nowSec = now.getHours()*3600 + now.getMinutes()*60 + now.getSeconds();
        let found = false;
        for (let s = 0; s < scheduledTimes.length; s++) {
            for (let p = 0; p < scheduledTimes[s].length; p++) {
                const schedSec = scheduledTimes[s][p];
                if (Math.abs(nowSec - schedSec) < 1) {
                    if (selectedSessionIndex !== s || selectedPhaseIndex !== p) {
                        selectedSessionIndex = s;
                        selectedPhaseIndex = p;
                        resetTimerToCurrentPhase();
                        renderSections();
                        renderPhases();
                        renderBottomContent();
                    }
                    startTimers();
                    found = true;
                    break;
                }
            }
            if (found) break;
        }
    }, 500);

    renderSections();
    renderPhases();
    resetTimerToCurrentPhase();
    renderBottomContent();
})();
</script>
</body>
</html>
