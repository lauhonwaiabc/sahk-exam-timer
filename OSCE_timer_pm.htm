<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8"/>
    <meta name="viewport" content="width=device-width, initial-scale=1"/>
    <title>OSCE Exam Timer</title>
    <link rel="stylesheet" href="timer_style.css">
    <script src="config/osce_config_pm.js"></script>
    <script src="config/osce_stations_pm.js"></script>
    <script src="config/osce_data_pm.js"></script>
</head>
<body>

<div id="clock">00:00:00</div>
<div id="controls">
    <button id="startBtn">Start</button>
    <button id="pauseBtn" disabled>Pause</button>
    <button id="stopBtn" disabled>Stop &amp; Reset</button>
    <button id="toggleModeBtn" aria-pressed="false" aria-label="Toggle between Station Mode and Candidate Mode">Switch
        to Candidate Mode
    </button>
</div>

<!-- Scheduled Start Time Input -->
<div id="startTimeContainer" style="text-align:center;margin:10px 0;">
    <label for="startTimeInput" style="font-weight:700;margin-right:8px;">Start Time (hh:mm:ss):</label>
    <input id="startTimeInput" type="time" step="1" value="09:30:00"
           style="font-size:1.1em;padding:6px 12px;border-radius:6px;border:1px solid #bbb;width:140px;">
    <button id="applyStartTimeBtn"
            style="font-size:1.1em;padding:7px 18px;border-radius:6px;border:none;background:#1976d2;color:white;font-weight:700;cursor:pointer;">
        Apply
    </button>
</div>

<!-- Search Input -->
<div id="searchContainer" style="display:flex;justify-content:center;align-items:center;margin:10px 0;">
    <input id="searchInput" type="text" placeholder="Enter Candidate Number, Station Name or Station Number"
           style="font-size:1.1em;padding:6px 12px;border-radius:6px;border:1px solid #bbb;width:320px;margin-right:8px;">
    <button id="searchBtn"
            style="font-size:1.1em;padding:7px 18px;border-radius:6px;border:none;background:#1976d2;color:white;font-weight:700;cursor:pointer;">
        Search
    </button>
</div>

<div id="topMenu">
    <ul id="sectionsList"></ul>
    <br>
    <ul id="subsectionsList"></ul>
</div>

<div id="bottomContent">
    <div class="timer" id="timerDisplay">00:00</div>
    <div class="info" id="infoDisplay">Select a session and phase to see information here.</div>
    <div id="stationModeContainer" aria-live="polite"></div>
    <div id="candidateModeContainer" aria-live="polite" style="display:none;"></div>
</div>

<script>
    (() => {

        // --- DOM ELEMENTS ---
        const clockEl = document.getElementById('clock');
        const startBtn = document.getElementById('startBtn');
        const pauseBtn = document.getElementById('pauseBtn');
        const stopBtn = document.getElementById('stopBtn');
        const toggleModeBtn = document.getElementById('toggleModeBtn');
        const sectionsList = document.getElementById('sectionsList');
        const subsectionsList = document.getElementById('subsectionsList');
        const timerDisplay = document.getElementById('timerDisplay');
        const infoDisplay = document.getElementById('infoDisplay');
        const stationModeContainer = document.getElementById('stationModeContainer');
        const candidateModeContainer = document.getElementById('candidateModeContainer');
        const searchInput = document.getElementById('searchInput');
        const searchBtn = document.getElementById('searchBtn');
        const startTimeInput = document.getElementById('startTimeInput');
        const applyStartTimeBtn = document.getElementById('applyStartTimeBtn');

        const REST_INDICES = STATION_NAMES
            .map((name, index) => name === "Rest" ? index : -1)
            .filter(index => index !== -1);

        // --- STATE ---
        let isRunning = false;
        let selectedSessionIndex = 0;
        let selectedPhaseIndex = 0;
        let countdownInterval = null;
        let countdownSecondsLeft = 0;
        let beepAudioCtx = null;
        let isCandidateMode = false;
        let lastSearchValue = '';

        // --- SCHEDULED TIME STATE ---
        let startTimeStr = START_TIME;
        let scheduledTimes = [];

        const SESSION_PHASES = [];
        for (let i = 0; i < NUM_SESSIONS; i++) {
            SESSION_PHASES.push([...standardPhases]);
        }

        function addSeconds(timeStr, seconds) {
            const [h, m, s] = timeStr.split(":").map(Number);
            const date = new Date(0, 0, 0, h, m, s);
            date.setSeconds(date.getSeconds() + seconds);
            return date.toTimeString().slice(0, 8);
        }

        function toHHMM(timeStr) {
            return timeStr.slice(0, 5);
        }

        function generateSessionTimes() {
            let times = [];
            let current = START_TIME;

            for (let phases of SESSION_PHASES) {
                const totalDuration = phases.reduce((sum, p) => sum + p.duration, 0);
                const next = addSeconds(current, totalDuration);
                times.push(`${toHHMM(current)}-${toHHMM(next)}`);
                current = next;
            }
            return times;
        }

        const SESSION_TIMES = generateSessionTimes();

        function parseTimeString(str) {
            if (!str) return 0;
            const [h, m, s] = str.split(':').map(Number);
            return (h * 3600) + (m * 60) + (s || 0);
        }

        function formatTimeHMSSec(secs) {
            const h = Math.floor(secs / 3600);
            const m = Math.floor((secs % 3600) / 60);
            const s = secs % 60;
            return `${h.toString().padStart(2, '0')}:${m.toString().padStart(2, '0')}:${s.toString().padStart(2, '0')}`;
        }

        function recalculateScheduledTimes() {
            scheduledTimes = [];
            let t = parseTimeString(startTimeStr);
            for (let s = 0; s < NUM_SESSIONS; s++) {
                scheduledTimes[s] = [];
                const phases = SESSION_PHASES[s];
                for (let p = 0; p < phases.length; p++) {
                    scheduledTimes[s][p] = t;
                    t += phases[p].duration;
                }
            }
        }

        recalculateScheduledTimes();

        // --- MENU ENABLE/DISABLE ---
        function setSessionPhaseMenusEnabled(enabled) {
            document.querySelectorAll('#sectionsList li').forEach((li, index) => {
                if (enabled) {
                    li.classList.remove('disabled');
                    li.tabIndex = 0;
                    li.style.pointerEvents = '';
                    li.style.opacity = '';
                } else {
                    if (index === selectedSessionIndex) {
                        li.classList.add('disabled', 'selected');
                        li.tabIndex = -1;
                        li.style.pointerEvents = 'none';
                        li.style.opacity = '1';
                    } else {
                        li.classList.add('disabled');
                        li.classList.remove('selected');
                        li.tabIndex = -1;
                        li.style.pointerEvents = 'none';
                        li.style.opacity = '0.5';
                    }
                }
            });
            document.querySelectorAll('#subsectionsList li').forEach((li, index) => {
                if (enabled) {
                    li.classList.remove('disabled');
                    li.tabIndex = 0;
                    li.style.pointerEvents = '';
                    li.style.opacity = '';
                } else {
                    if (index === selectedPhaseIndex) {
                        li.classList.add('disabled', 'selected');
                        li.tabIndex = -1;
                        li.style.pointerEvents = 'none';
                        li.style.opacity = '1';
                    } else {
                        li.classList.add('disabled');
                        li.classList.remove('selected');
                        li.tabIndex = -1;
                        li.style.pointerEvents = 'none';
                        li.style.opacity = '0.5';
                    }
                }
            });
        }

        // --- AUDIO BEEP ---
        function initBeep() {
            if (!beepAudioCtx) beepAudioCtx = new (window.AudioContext || window.webkitAudioContext)();
        }

        function resumeAudioContext() {
            if (beepAudioCtx && beepAudioCtx.state === 'suspended') beepAudioCtx.resume();
        }

        document.body.addEventListener('click', resumeAudioContext, {once: true});
        document.body.addEventListener('keydown', resumeAudioContext, {once: true});

        function beep(times = 1) {
            initBeep();
            let count = 0;

            function playBeep() {
                if (count >= times) return;
                const oscillator = beepAudioCtx.createOscillator();
                const gainNode = beepAudioCtx.createGain();
                oscillator.frequency.value = 1000;
                oscillator.type = 'square';
                oscillator.connect(gainNode);
                gainNode.connect(beepAudioCtx.destination);
                oscillator.start();
                setTimeout(() => {
                    oscillator.stop();
                    count++;
                    setTimeout(playBeep, 150);
                }, 200);
            }

            playBeep();
        }

        // --- CLOCK ---
        function formatTime(s) {
            const m = Math.floor(s / 60);
            const sec = s % 60;
            return `${m.toString().padStart(2, '0')}:${sec.toString().padStart(2, '0')}`;
        }

        function updateClock() {
            const now = new Date();
            const h = now.getHours().toString().padStart(2, '0');
            const m = now.getMinutes().toString().padStart(2, '0');
            const s = now.getSeconds().toString().padStart(2, '0');
            clockEl.textContent = `${h}:${m}:${s}`;
        }

        setInterval(updateClock, 1000);
        updateClock();

        // --- SEARCH HIGHLIGHT FUNCTIONALITY ---
        function highlightBoxes(searchValue) {
            document.querySelectorAll('.osce-box.highlight, .candidate-cell.highlight').forEach(el => el.classList.remove('highlight'));
            if (!searchValue) return;
            const search = searchValue.trim().toLowerCase();
            let stationNum = null;
            const stationMatch = search.match(/^station\s*(\d{1,2})$/i);
            if (stationMatch) {
                stationNum = parseInt(stationMatch[1], 10);
                if (stationNum < 1 || stationNum > NUM_STATIONS) stationNum = null;
            }

            let stationNameIndex = null;
            if (!stationNum) {
                for (let i = 0; i < STATION_NAMES.length; i++) {
                    if (STATION_NAMES[i].toLowerCase().includes(search)) {
                        stationNameIndex = i;
                        break;
                    }
                }
            }

            if (isCandidateMode) {
                document.querySelectorAll('#candidateModeContainer .candidate-cell').forEach(cell => {
                    const num = cell.querySelector('.candidate-number')?.textContent.trim();
                    if (num === searchValue) cell.classList.add('highlight');
                    if (stationNum) {
                        const label = cell.querySelector('.candidate-station')?.textContent.match(/Station\s*(\d+)/i);
                        if (label && parseInt(label[1], 10) === stationNum) cell.classList.add('highlight');
                    }
                    if (stationNameIndex !== null) {
                        const label = cell.querySelector('.candidate-station')?.textContent.toLowerCase();
                        if (label && label.includes(STATION_NAMES[stationNameIndex].toLowerCase())) cell.classList.add('highlight');
                    }
                });
            } else {
                document.querySelectorAll('#stationModeContainer .osce-box').forEach((box, idx) => {
                    const cand = box.querySelector('.candidate-row .candidate-name')?.textContent.trim();
                    const obs = box.querySelector('.observer-row .candidate-name')?.textContent.trim();
                    if (cand === searchValue || obs === searchValue) box.classList.add('highlight');
                    if (stationNum && idx === (stationNum - 1)) box.classList.add('highlight');
                    if (stationNameIndex !== null && idx === stationNameIndex) box.classList.add('highlight');
                });
            }
        }

        function doSearch() {
            lastSearchValue = searchInput.value.trim();
            highlightBoxes(lastSearchValue);
        }

        searchInput.addEventListener('keydown', e => {
            if (e.key === 'Enter') doSearch();
        });
        searchBtn.addEventListener('click', doSearch);
        searchInput.addEventListener('input', () => {
            if (!searchInput.value.trim()) {
                lastSearchValue = '';
                highlightBoxes('');
            }
        });

        // --- RENDERING ---
        function renderSections() {
            sectionsList.innerHTML = '';
            for (let i = 0; i < NUM_SESSIONS; i++) {
                const li = document.createElement('li');
                li.textContent = `Session ${i + 1}`;
                if (i === selectedSessionIndex) li.classList.add('selected');
                li.addEventListener('click', () => {
                    if (isRunning) return;
                    if (selectedSessionIndex !== i) {
                        selectedSessionIndex = i;
                        selectedPhaseIndex = 0;
                        resetTimerToCurrentPhase();
                        renderSections();
                        renderPhases();
                        renderBottomContent();
                        if (isRunning) startCountdownForSelected();
                    }
                });
                sectionsList.appendChild(li);
            }
            setSessionPhaseMenusEnabled(!isRunning);
        }

        function renderPhases() {
            subsectionsList.innerHTML = '';
            const currentPhases = SESSION_PHASES[selectedSessionIndex];
            currentPhases.forEach((phase, idx) => {
                const li = document.createElement('li');
                li.textContent = phase.title;
                if (idx === selectedPhaseIndex) li.classList.add('selected');
                li.addEventListener('click', () => {
                    if (isRunning) return;
                    if (selectedPhaseIndex !== idx) {
                        selectedPhaseIndex = idx;
                        resetTimerToCurrentPhase();
                        renderPhases();
                        renderBottomContent();
                        if (isRunning) startCountdownForSelected();
                    }
                });
                subsectionsList.appendChild(li);
            });
            setSessionPhaseMenusEnabled(!isRunning);
        }

        function renderBottomContent() {
            const currentPhases = SESSION_PHASES[selectedSessionIndex];
            const phase = currentPhases[selectedPhaseIndex];
            updateTimerDisplay();

            const sessionNumber = (selectedSessionIndex === 5) ? 'Break' : (selectedSessionIndex > 5 ? selectedSessionIndex : selectedSessionIndex + 1);
            const heading = 'SAHK Final Examination Preparation Course - Viva Examination';
            const sessionTime = SESSION_TIMES[selectedSessionIndex] || '';
            const schedSec = scheduledTimes[selectedSessionIndex]?.[selectedPhaseIndex];
            const schedTimeStr = schedSec ? formatTimeHMSSec(schedSec) : '';
            const sessionLine = `Session ${sessionNumber} (${phase.title}), ${sessionTime} (${phase.info})<br><span style="color:#1976d2;">Scheduled Start: ${schedTimeStr}</span>`;
            infoDisplay.innerHTML = `
      <div style="font-weight: 700; font-size: 1em; margin-bottom: 6px; text-align:center;">
        ${heading}
      </div>
      <div style="font-weight: 600; font-size: 1em; margin-bottom: 10px; text-align:center;">
        ${sessionLine}
      </div>
    `;

            if (isCandidateMode) {
                renderCandidateMode();
            } else {
                renderStationMode();
            }
        }

        function renderStationMode() {
            candidateModeContainer.style.display = 'none';
            stationModeContainer.style.display = 'flex';
            const sessionKey = `Session ${selectedSessionIndex + 1}`;
            const details = osceData[sessionKey];
            if (!details) {
                stationModeContainer.innerHTML = '<p style="text-align:center; color:#666;">No data available.</p>';
                return;
            }
            let html = '';
            for (let i = 0; i < NUM_STATIONS; i++) {
                const candidate = details.Candidate[i] || '—';
                const observer = details.Observer[i] || '—';
                const isRest = REST_INDICES.includes(i);
                html += `
            <div class="osce-box${isRest ? ' rest-station' : ''}" tabindex="0" aria-label="Station ${i + 1} details">
              <div class="osce-title">${STATION_NAMES[i]}<br><span style="font-size:0.7em;color:#555;">Station ${i + 1}</span></div>
              <div class="candidate-row">
                <div class="role-label">Candidate</div>
                <div class="candidate-name">${candidate}</div>
              </div>
              <div class="observer-row">
                <div class="role-label">Observer</div>
                <div class="candidate-name">${observer}</div>
              </div>
            </div>
          `;
            }
            stationModeContainer.innerHTML = html;
            highlightBoxes(lastSearchValue);
        }

        function renderCandidateMode() {
            stationModeContainer.style.display = 'none';
            candidateModeContainer.style.display = 'flex';
            const sessionKey = `Session ${selectedSessionIndex + 1}`;
            const details = osceData[sessionKey];
            if (!details) {
                candidateModeContainer.innerHTML = '<p style="text-align:center; color:#666;">No data available.</p>';
                return;
            }
            const entries = [];
            for (let i = 0; i < NUM_STATIONS; i++) {
                const candNum = details.Candidate[i];
                if (candNum) entries.push({number: candNum, stationIndex: i, role: 'Candidate'});
                const obsNum = details.Observer[i];
                if (obsNum) entries.push({number: obsNum, stationIndex: i, role: 'Observer'});
            }
            entries.sort((a, b) => a.number.localeCompare(b.number));
            let html = '';
            for (let i = 0; i < entries.length; i++) {
                const entry = entries[i];
                const isRest = REST_INDICES.includes(entry.stationIndex);
                let cellClass = 'candidate-cell';
                if (entry.role === 'Observer') cellClass += ' observer-cell';
                if (isRest) cellClass += ' rest-station';
                html += `
            <div class="${cellClass}" tabindex="0" aria-label="${entry.role} ${entry.number}, Station ${entry.stationIndex + 1}">
              <div class="candidate-number">${entry.number}</div>
              <div class="candidate-role ${entry.role.toLowerCase()}">${entry.role}</div>
              <div class="candidate-station">${STATION_NAMES[entry.stationIndex]}<br><span style="font-size:0.8em;color:#555;">Station ${entry.stationIndex + 1}</span></div>
            </div>
          `;
            }
            candidateModeContainer.innerHTML = html;
            highlightBoxes(lastSearchValue);
        }

        function updateTimerDisplay() {
            timerDisplay.textContent = formatTime(countdownSecondsLeft);
        }

        function resetTimerToCurrentPhase() {
            const currentPhases = SESSION_PHASES[selectedSessionIndex];
            countdownSecondsLeft = currentPhases[selectedPhaseIndex].duration;
        }

        function moveToNextPhase() {
            let s = selectedSessionIndex;
            let p = selectedPhaseIndex + 1;
            const currentPhases = SESSION_PHASES[s];
            if (p >= currentPhases.length) {
                s++;
                p = 0;
                if (s >= NUM_SESSIONS) {
                    stopTimers();
                    alert('All sessions completed!');
                    return;
                }
            }
            selectedSessionIndex = s;
            selectedPhaseIndex = p;
            renderSections();
            renderPhases();
            resetTimerToCurrentPhase();
            renderBottomContent();
            if (isRunning) startCountdownForSelected();
        }

        function startCountdownForSelected() {
            clearInterval(countdownInterval);
            if (countdownSecondsLeft <= 0) resetTimerToCurrentPhase();
            updateTimerDisplay();
            countdownInterval = setInterval(() => {
                if (!isRunning) return;
                countdownSecondsLeft--;
                updateTimerDisplay();
                if (countdownSecondsLeft <= 0) {
                    beep(5);
                    moveToNextPhase();
                }
            }, 1000);
        }

        function startTimers() {
            if (isRunning) return;
            isRunning = true;
            startBtn.disabled = true;
            pauseBtn.disabled = false;
            stopBtn.disabled = false;
            setSessionPhaseMenusEnabled(false);
            if (countdownSecondsLeft <= 0) resetTimerToCurrentPhase();
            startCountdownForSelected();
        }

        function pauseTimers() {
            if (!isRunning) return;
            isRunning = false;
            startBtn.disabled = false;
            pauseBtn.disabled = true;
            stopBtn.disabled = false;
            clearInterval(countdownInterval);
            setSessionPhaseMenusEnabled(true);
        }

        function stopTimers() {
            isRunning = false;
            startBtn.disabled = false;
            pauseBtn.disabled = true;
            stopBtn.disabled = true;
            clearInterval(countdownInterval);
            resetTimerToCurrentPhase();
            updateTimerDisplay();
            setSessionPhaseMenusEnabled(true);
        }

        toggleModeBtn.addEventListener('click', () => {
            isCandidateMode = !isCandidateMode;
            toggleModeBtn.textContent = isCandidateMode ? 'Switch to Station Mode' : 'Switch to Candidate Mode';
            toggleModeBtn.setAttribute('aria-pressed', isCandidateMode.toString());
            renderBottomContent();
        });
        startBtn.addEventListener('click', startTimers);
        pauseBtn.addEventListener('click', pauseTimers);
        stopBtn.addEventListener('click', stopTimers);

        applyStartTimeBtn.addEventListener('click', () => {
            startTimeStr = startTimeInput.value || START_TIME;
            recalculateScheduledTimes();
            renderSections();
            renderPhases();
            renderBottomContent();
        });

        setInterval(() => {
            if (isRunning) return;
            const now = new Date();
            const nowSec = now.getHours() * 3600 + now.getMinutes() * 60 + now.getSeconds();
            let found = false;
            for (let s = 0; s < scheduledTimes.length; s++) {
                for (let p = 0; p < scheduledTimes[s].length; p++) {
                    const schedSec = scheduledTimes[s][p];
                    if (Math.abs(nowSec - schedSec) < 1) {
                        if (selectedSessionIndex !== s || selectedPhaseIndex !== p) {
                            selectedSessionIndex = s;
                            selectedPhaseIndex = p;
                            resetTimerToCurrentPhase();
                            renderSections();
                            renderPhases();
                            renderBottomContent();
                        }
                        startTimers();
                        found = true;
                        break;
                    }
                }
                if (found) break;
            }
        }, 500);

        renderSections();
        renderPhases();
        resetTimerToCurrentPhase();
        renderBottomContent();
    })();
</script>
</body>
</html>
