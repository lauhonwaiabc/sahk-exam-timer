<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8"/>
    <meta name="viewport" content="width=device-width, initial-scale=1"/>
    <title>OSCE Exam Timer</title>
    <link rel="stylesheet" href="timer_style.css"/>
    <script src="config/osce_config.js"></script>
    <script src="config/osce_stations.js"></script>
    <script src="config/osce_data_pm.js"></script>
</head>
<body>
<div id="clock">00:00:00</div>
<div id="controls">
    <button id="startBtn">Start</button>
    <button id="pauseBtn" disabled>Pause</button>
    <button id="stopBtn" disabled>Stop &amp; Reset</button>
    <button id="toggleModeBtn" aria-pressed="false" aria-label="Toggle between Station Mode and Candidate Mode">Switch
        to Candidate Mode
    </button>
</div>

<div id="startTimeContainer" style="text-align:center;margin:10px 0;">
    <label for="startTimeInput" style="font-weight:700;margin-right:8px;">Start Time (hh:mm:ss):</label>
    <input id="startTimeInput" type="time" step="1"
           style="font-size:1.1em;padding:6px 12px;border-radius:6px;border:1px solid #bbb;width:140px;"/>
    <button id="applyStartTimeBtn"
            style="font-size:1.1em;padding:7px 18px;border-radius:6px;border:none;background:#1976d2;color:white;font-weight:700;cursor:pointer;">
        Apply
    </button>
</div>

<div id="searchContainer" style="display:flex;justify-content:center;align-items:center;margin:10px 0;">
    <input id="searchInput" type="text" placeholder="Enter Candidate Number, Station Name or Station Number"
           style="font-size:1.1em;padding:6px 12px;border-radius:6px;border:1px solid #bbb;width:320px;margin-right:8px;"/>
    <button id="searchBtn"
            style="font-size:1.1em;padding:7px 18px;border-radius:6px;border:none;background:#1976d2;color:white;font-weight:700;cursor:pointer;">
        Search
    </button>
</div>

<div id="topMenu">
    <ul id="sectionsList"></ul>
    <br/>
    <ul id="subsectionsList"></ul>
</div>

<div id="bottomContent">
    <div class="timer" id="timerDisplay">00:00</div>
    <div class="info" id="infoDisplay">Select a session and phase to see information here.</div>
    <div id="stationModeContainer" aria-live="polite"></div>
    <div id="candidateModeContainer" aria-live="polite" style="display:none;"></div>
</div>

<script>
    (() => {
        const clockEl = document.getElementById('clock');
        const startBtn = document.getElementById('startBtn');
        const pauseBtn = document.getElementById('pauseBtn');
        const stopBtn = document.getElementById('stopBtn');
        const toggleModeBtn = document.getElementById('toggleModeBtn');
        const sectionsList = document.getElementById('sectionsList');
        const subsectionsList = document.getElementById('subsectionsList');
        const timerDisplay = document.getElementById('timerDisplay');
        const infoDisplay = document.getElementById('infoDisplay');
        const stationModeContainer = document.getElementById('stationModeContainer');
        const candidateModeContainer = document.getElementById('candidateModeContainer');
        const searchInput = document.getElementById('searchInput');
        const searchBtn = document.getElementById('searchBtn');
        const startTimeInput = document.getElementById('startTimeInput');
        const applyStartTimeBtn = document.getElementById('applyStartTimeBtn');

        const REST_INDICES = STATION_NAMES.reduce((acc, name, i) => (name === "Rest" ? acc.concat(i) : acc), []);

        let isRunning = false;
        let selectedSessionIndex = 0;
        let selectedPhaseIndex = 0;
        let countdownInterval = null;
        let isCandidateMode = false;
        let lastSearchValue = '';
        let startTime = null;
        let endTime = null;

        const START_TIME = START_TIME_PM;
        startTimeInput.value = START_TIME;
        let startTimeStr = START_TIME;

        const SESSION_PHASES = Array(NUM_SESSIONS).fill(null).map(() => [...standardPhases]);
        let scheduledTimes = [];

        const toHHMM = s => s.slice(0, 5);

        function addSeconds(timeStr, seconds) {
            const [h, m, s] = timeStr.split(":").map(Number);
            const d = new Date(0, 0, 0, h, m, s);
            d.setSeconds(d.getSeconds() + seconds);
            return d.toTimeString().slice(0, 8);
        }

        function generateSessionTimes() {
            let times = [], current = START_TIME;
            for (const phases of SESSION_PHASES) {
                const total = phases.reduce((sum, p) => sum + p.duration, 0);
                const next = addSeconds(current, total);
                times.push(`${toHHMM(current)}-${toHHMM(next)}`);
                current = next;
            }
            return times;
        }

        const SESSION_TIMES = generateSessionTimes();

        function parseTimeString(str) {
            if (!str) return 0;
            const [h, m, s = 0] = str.split(':').map(Number);
            return h * 3600 + m * 60 + s;
        }

        function formatTimeHMSSec(secs) {
            secs %= 86400;
            const h = Math.floor(secs / 3600);
            const m = Math.floor((secs % 3600) / 60);
            const s = secs % 60;
            return `${h.toString().padStart(2, '0')}:${m.toString().padStart(2, '0')}:${s.toString().padStart(2, '0')}`;
        }

        function recalculateScheduledTimes() {
            scheduledTimes = [];
            let t = parseTimeString(startTimeStr);
            for (let s = 0; s < NUM_SESSIONS; s++) {
                scheduledTimes[s] = [];
                for (const phase of SESSION_PHASES[s]) {
                    scheduledTimes[s].push(t);
                    t += phase.duration;
                }
            }
        }

        recalculateScheduledTimes();

        function setSessionPhaseMenusEnabled(enabled) {
            const toggleElems = (list, selectedIdx) => [...list.children].forEach((li, idx) => {
                if (enabled) {
                    li.classList.remove('disabled');
                    li.tabIndex = 0;
                    li.style.pointerEvents = '';
                    li.style.opacity = '';
                } else {
                    if (selectedIdx === idx) {
                        li.classList.add('disabled', 'selected');
                        li.tabIndex = -1;
                        li.style.pointerEvents = 'none';
                        li.style.opacity = '1';
                    } else {
                        li.classList.add('disabled');
                        li.classList.remove('selected');
                        li.tabIndex = -1;
                        li.style.pointerEvents = 'none';
                        li.style.opacity = '0.5';
                    }
                }
            });
            toggleElems(sectionsList, selectedSessionIndex);
            toggleElems(subsectionsList, selectedPhaseIndex);
        }

        let beepAudioCtx = null;

        function initBeep() {
            if (!beepAudioCtx) beepAudioCtx = new (window.AudioContext || window.webkitAudioContext)();
        }

        function resumeAudioContext() {
            if (beepAudioCtx?.state === 'suspended') beepAudioCtx.resume();
        }

        document.body.addEventListener('click', resumeAudioContext, {once: true});
        document.body.addEventListener('keydown', resumeAudioContext, {once: true});

        function beep(times = 1) {
            initBeep();
            let count = 0;
            (function play() {
                if (count >= times) return;
                const osc = beepAudioCtx.createOscillator();
                const gain = beepAudioCtx.createGain();
                osc.frequency.value = 1000;
                osc.type = 'square';
                osc.connect(gain);
                gain.connect(beepAudioCtx.destination);
                osc.start();
                setTimeout(() => {
                    osc.stop();
                    count++;
                    setTimeout(play, 150);
                }, 200);
            })();
        }

        function updateClock() {
            clockEl.textContent = new Date().toTimeString().slice(0, 8);
        }

        setInterval(updateClock, 1000);
        updateClock();

        function highlightBoxes(searchValue) {
            document.querySelectorAll('.osce-box.highlight, .candidate-cell.highlight').forEach(el => el.classList.remove('highlight'));
            if (!searchValue) return;
            const search = searchValue.trim().toLowerCase();
            let stationNum = null;
            const sm = search.match(/^station\s*(\d{1,2})$/i);
            if (sm) {
                stationNum = +sm[1];
                if (stationNum < 1 || stationNum > NUM_STATIONS) stationNum = null;
            }
            const stationNameIndex = stationNum === null ? STATION_NAMES.findIndex(name => name.toLowerCase().includes(search)) : null;

            if (isCandidateMode) {
                candidateModeContainer.querySelectorAll('.candidate-cell').forEach(cell => {
                    const num = cell.querySelector('.candidate-number')?.textContent.trim();
                    if (num === searchValue) cell.classList.add('highlight');
                    if (stationNum) {
                        const label = cell.querySelector('.candidate-station')?.textContent.match(/Station\s*(\d+)/i);
                        if (label && +label[1] === stationNum) cell.classList.add('highlight');
                    }
                    if (stationNameIndex !== null) {
                        const label = cell.querySelector('.candidate-station')?.textContent.toLowerCase();
                        if (label && label.includes(STATION_NAMES[stationNameIndex].toLowerCase())) cell.classList.add('highlight');
                    }
                });
            } else {
                stationModeContainer.querySelectorAll('.osce-box').forEach((box, idx) => {
                    const cand = box.querySelector('.candidate-row .candidate-name')?.textContent.trim();
                    const obs = box.querySelector('.observer-row .candidate-name')?.textContent.trim();
                    if (cand === searchValue || obs === searchValue) box.classList.add('highlight');
                    if (stationNum === idx + 1) box.classList.add('highlight');
                    if (stationNameIndex === idx) box.classList.add('highlight');
                });
            }
        }

        function doSearch() {
            lastSearchValue = searchInput.value.trim();
            highlightBoxes(lastSearchValue);
        }

        searchInput.addEventListener('keydown', e => {
            if (e.key === 'Enter') doSearch();
        });
        searchBtn.addEventListener('click', doSearch);
        searchInput.addEventListener('input', () => {
            if (!searchInput.value.trim()) {
                lastSearchValue = '';
                highlightBoxes('');
            }
        });

        function renderSections() {
            sectionsList.innerHTML = '';
            for (let i = 0; i < NUM_SESSIONS; i++) {
                const li = document.createElement('li');
                li.textContent = `Session ${i + 1}`;
                if (i === selectedSessionIndex) li.classList.add('selected');
                li.addEventListener('click', () => {
                    if (isRunning) return;
                    if (selectedSessionIndex !== i) {
                        selectedSessionIndex = i;
                        selectedPhaseIndex = 0;
                        resetTimerToCurrentPhase();
                        startTime = endTime = null;
                        renderSections();
                        renderPhases();
                        renderBottomContent();
                        if (isRunning) startCountdownForSelected();
                    }
                });
                sectionsList.appendChild(li);
            }
            setSessionPhaseMenusEnabled(!isRunning);
        }

        function renderPhases() {
            subsectionsList.innerHTML = '';
            SESSION_PHASES[selectedSessionIndex].forEach((phase, idx) => {
                const li = document.createElement('li');
                li.textContent = phase.title;
                if (idx === selectedPhaseIndex) li.classList.add('selected');
                li.addEventListener('click', () => {
                    if (isRunning) return;
                    if (selectedPhaseIndex !== idx) {
                        selectedPhaseIndex = idx;
                        resetTimerToCurrentPhase();
                        startTime = endTime = null;
                        renderPhases();
                        renderBottomContent();
                        if (isRunning) startCountdownForSelected();
                    }
                });
                subsectionsList.appendChild(li);
            });
            setSessionPhaseMenusEnabled(!isRunning);
        }

        function formatAbsoluteTime(ms) {
            return new Date(ms).toTimeString().slice(0, 8);
        }

        function renderBottomContent() {
            const phase = SESSION_PHASES[selectedSessionIndex][selectedPhaseIndex];
            updateTimerDisplay();
            const sessionNumber = selectedSessionIndex + 1;
            const heading = 'SAHK Final Examination Preparation Course - OSCE Examination';
            const sessionTime = SESSION_TIMES[selectedSessionIndex] || '';
            const schedSec = scheduledTimes[selectedSessionIndex]?.[selectedPhaseIndex];
            const schedTimeStr = schedSec ? formatTimeHMSSec(schedSec) : '';
            const displayStartTime = isRunning && startTime !== null ? formatAbsoluteTime(startTime) : schedTimeStr;
            const displayEndTime = isRunning && endTime !== null ? formatAbsoluteTime(endTime) : '';
            const sessionLine = isRunning
                ? `Session ${sessionNumber} (${phase.title}), ${sessionTime} (${phase.info})<br><span style="color:#1976d2;">Current Session Time: ${displayStartTime} - ${displayEndTime}</span>`
                : `Session ${sessionNumber} (${phase.title}), ${sessionTime} (${phase.info})<br><span style="color:#1976d2;">Scheduled Start: ${displayStartTime}</span>`;
            infoDisplay.innerHTML = `<div style="font-weight:700;font-size:1em;margin-bottom:6px;text-align:center;">${heading}</div><div style="font-weight:600;font-size:1em;margin-bottom:10px;text-align:center;">${sessionLine}</div>`;
            isCandidateMode ? renderCandidateMode() : renderStationMode();
        }

        function renderStationMode() {
            candidateModeContainer.style.display = 'none';
            stationModeContainer.style.display = 'flex';
            const sessionKey = `Session ${selectedSessionIndex + 1}`;
            const details = osceData[sessionKey];
            if (!details) {
                stationModeContainer.innerHTML = '<p style="text-align:center; color:#666;">No data available.</p>';
                return;
            }
            stationModeContainer.innerHTML = Array(NUM_STATIONS).fill(0).map((_, i) => {
                const candidate = details.Candidate[i] || '—';
                const observer = details.Observer[i] || '—';
                const isRest = REST_INDICES.includes(i) ? ' rest-station' : '';
                return `
            <div class="osce-box${isRest}" tabindex="0" aria-label="Station ${i + 1} details">
              <div class="osce-title">${STATION_NAMES[i]}<br><span style="font-size:0.7em;color:#555;">Station ${i + 1}</span></div>
              <div class="candidate-row"><div class="role-label">Candidate</div><div class="candidate-name">${candidate}</div></div>
              <div class="observer-row"><div class="role-label">Observer</div><div class="candidate-name">${observer}</div></div>
            </div>`;
            }).join('');
            highlightBoxes(lastSearchValue);
        }

        function renderCandidateMode() {
            stationModeContainer.style.display = 'none';
            candidateModeContainer.style.display = 'flex';
            const sessionKey = `Session ${selectedSessionIndex + 1}`;
            const details = osceData[sessionKey];
            if (!details) {
                candidateModeContainer.innerHTML = '<p style="text-align:center; color:#666;">No data available.</p>';
                return;
            }
            const entries = [];
            for (let i = 0; i < NUM_STATIONS; i++) {
                if (details.Candidate[i]) entries.push({
                    number: details.Candidate[i],
                    stationIndex: i,
                    role: 'Candidate'
                });
                if (details.Observer[i]) entries.push({number: details.Observer[i], stationIndex: i, role: 'Observer'});
            }
            entries.sort((a, b) => a.number.localeCompare(b.number));
            candidateModeContainer.innerHTML = entries.map(({number, stationIndex, role}) => {
                let cls = 'candidate-cell' + (role === 'Observer' ? ' observer-cell' : '') + (REST_INDICES.includes(stationIndex) ? ' rest-station' : '');
                return `
            <div class="${cls}" tabindex="0" aria-label="${role} ${number}, Station ${stationIndex + 1}">
              <div class="candidate-number">${number}</div>
              <div class="candidate-role ${role.toLowerCase()}">${role}</div>
              <div class="candidate-station">${STATION_NAMES[stationIndex]}<br><span style="font-size:0.8em;color:#555;">Station ${stationIndex + 1}</span></div>
            </div>`;
            }).join('');
            highlightBoxes(lastSearchValue);
        }

        function formatTime(s) {
            const m = Math.floor(s / 60);
            s %= 60;
            return `${m.toString().padStart(2, '0')}:${s.toString().padStart(2, '0')}`;
        }

        function updateTimerDisplay() {
            timerDisplay.textContent = formatTime(countdownSecondsLeft);
        }

        let countdownSecondsLeft = SESSION_PHASES[0][0].duration;

        function resetTimerToCurrentPhase() {
            countdownSecondsLeft = SESSION_PHASES[selectedSessionIndex][selectedPhaseIndex].duration;
        }

        function moveToNextPhase() {
            let s = selectedSessionIndex;
            let p = selectedPhaseIndex + 1;
            if (p >= SESSION_PHASES[s].length) {
                s++;
                p = 0;
                if (s >= NUM_SESSIONS) {
                    stopTimers();
                    alert('All sessions completed!');
                    return;
                }
            }
            selectedSessionIndex = s;
            selectedPhaseIndex = p;
            resetTimerToCurrentPhase();
            const dur = SESSION_PHASES[s][p].duration;
            if (endTime) {
                startTime = endTime;
                endTime = startTime + dur * 1000;
            } else {
                startTime = getCorrectedNow();
                endTime = startTime + dur * 1000;
            }
            countdownSecondsLeft = dur;
            renderSections();
            renderPhases();
            renderBottomContent();
            if (isRunning) startCountdownForSelected();
        }

        function startCountdownForSelected() {
            clearInterval(countdownInterval);
            updateTimerDisplay();
            countdownInterval = setInterval(() => {
                if (!isRunning) return;
                const now = getCorrectedNow();
                const diff = endTime - now;
                countdownSecondsLeft = diff > 0 ? Math.ceil(diff / 1000) : 0;
                updateTimerDisplay();
                if (countdownSecondsLeft <= 0) {
                    beep(5);
                    moveToNextPhase();
                }
            }, 200);
        }

        async function startTimers() {
            if (isRunning) return;
            await fetchStandardTimeOffset();
            isRunning = true;
            startBtn.disabled = true;
            pauseBtn.disabled = false;
            stopBtn.disabled = false;
            setSessionPhaseMenusEnabled(false);
            if (countdownSecondsLeft <= 0) resetTimerToCurrentPhase();
            startTime = getCorrectedNow();
            endTime = startTime + countdownSecondsLeft * 1000;
            renderBottomContent();
            startCountdownForSelected();
        }

        function pauseTimers() {
            if (!isRunning) return;
            isRunning = false;
            startBtn.disabled = false;
            pauseBtn.disabled = true;
            stopBtn.disabled = false;
            clearInterval(countdownInterval);
            const diff = endTime - getCorrectedNow();
            countdownSecondsLeft = diff > 0 ? Math.ceil(diff / 1000) : 0;
            startTime = endTime = null;
            setSessionPhaseMenusEnabled(true);
            updateTimerDisplay();
        }


        function stopTimers() {
            isRunning = false;
            startBtn.disabled = false;
            pauseBtn.disabled = true;
            stopBtn.disabled = true;
            clearInterval(countdownInterval);
            resetTimerToCurrentPhase();
            startTime = endTime = null;
            updateTimerDisplay();
            renderBottomContent();
            setSessionPhaseMenusEnabled(true);
        }

        toggleModeBtn.onclick = () => {
            isCandidateMode = !isCandidateMode;
            toggleModeBtn.textContent = isCandidateMode ? 'Switch to Station Mode' : 'Switch to Candidate Mode';
            toggleModeBtn.setAttribute('aria-pressed', isCandidateMode.toString());
            renderBottomContent();
        };
        startBtn.onclick = startTimers;
        pauseBtn.onclick = pauseTimers;
        stopBtn.onclick = stopTimers;

        applyStartTimeBtn.onclick = () => {
            startTimeStr = startTimeInput.value || START_TIME;
            recalculateScheduledTimes();
            renderSections();
            renderPhases();
            renderBottomContent();
        };

        setInterval(() => {
            if (isRunning) return;
            const now = new Date();
            const nowSec = now.getHours() * 3600 + now.getMinutes() * 60 + now.getSeconds();
            outer: for (let s = 0; s < scheduledTimes.length; s++) {
                for (let p = 0; p < scheduledTimes[s].length; p++) {
                    if (Math.abs(nowSec - scheduledTimes[s][p]) < 1) {
                        if (selectedSessionIndex !== s || selectedPhaseIndex !== p) {
                            selectedSessionIndex = s;
                            selectedPhaseIndex = p;
                            resetTimerToCurrentPhase();
                            startTime = endTime = null;
                            renderSections();
                            renderPhases();
                            renderBottomContent();
                        }
                        startTimers();
                        break outer;
                    }
                }
            }
        }, 2);

        renderSections();
        renderPhases();
        resetTimerToCurrentPhase();
        startTime = endTime = null;
        renderBottomContent();

        async function fetchStandardTime() {
            try {
                const response = await fetch('http://worldtimeapi.org/api/ip');
                const data = await response.json();
                const timeStr = new Date(data.datetime).toTimeString().slice(0, 8);
                clockEl.textContent = timeStr;
                return new Date(data.datetime).getTime(); // timestamp in ms
            } catch (e) {
                console.error('Error fetching standard time, falling back to local time', e);
                clockEl.textContent = new Date().toTimeString().slice(0, 8);
                return Date.now();
            }
        }

        async function fetchStandardTimeOffset() {
            try {
                const response = await fetch('http://worldtimeapi.org/api/ip');
                const data = await response.json();
                const standardTime = new Date(data.datetime).getTime();
                timeOffset = standardTime - Date.now();
            } catch (e) {
                console.error('Failed to fetch standard time, using local time fallback', e);
                timeOffset = 0;
            }
        }

        function getCorrectedNow() {
            return Date.now() + timeOffset;
        }

        fetchStandardTime();
        setInterval(fetchStandardTime, 60000);

    })();
</script>
</body>
</html>
